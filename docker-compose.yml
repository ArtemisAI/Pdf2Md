version: '3.8'

services:
  mcp-server:
    build:
      context: .
      target: runtime
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - MCP_HTTP_MODE=true
      - MCP_HTTP_PORT=3000
      - REDIS_URL=redis://redis:6379
      - DISABLE_REDIS=false
      - CUDA_VISIBLE_DEVICES=0
      - KMP_DUPLICATE_LIB_OK=TRUE
      - OMP_NUM_THREADS=4
    depends_on:
      - redis
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    volumes:
      - ./uploads:/app/uploads  # For file uploads
      - ./logs:/app/logs        # For application logs
    networks:
      - mcp-network

  redis:
    image: redis:7.2-alpine
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Redis Commander for monitoring
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin
    ports:
      - "8081:8081"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - mcp-network
    profiles:
      - monitoring

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - mcp-server
    restart: unless-stopped
    networks:
      - mcp-network
    profiles:
      - production

volumes:
  redis-data:
    driver: local

networks:
  mcp-network:
    driver: bridge